// Generated by LiveScript 1.4.0
(function(){
  module.exports = function(grunt){
    var convertMapping, makePair, mapping, key, getCompiled, loadModuleFirst, separate, live, liveModules, liveOther, coffee, ts, coffeeModules, coffeeOther, tsModules, tsOther, files, path, js, staf, bower, app, replace, build, npmTasks, i$, len$, task, load;
    convertMapping = function(file){
      var ref$;
      return ref$ = {}, ref$[".compiled/" + file.dest] = file.src[0], ref$;
    };
    makePair = function(from, to){
      return grunt.file.expandMapping(["app/components/**/*" + from, "./*" + from, "app/*" + from], "", {
        ext: to,
        extDot: 'last'
      }).map(convertMapping);
    };
    mapping = [
      {
        to: '.js',
        from: ['.ls', '.coffee', '.ts', '.js']
      }, {
        to: '.css',
        from: ['.css', 'sass']
      }, {
        to: '.html',
        from: ['.html', '.jade']
      }
    ];
    key = function(o){
      return Object.keys(o)[0];
    };
    getCompiled = function(to){
      return mapping.filter(function(it){
        return it.to === to;
      })[0].from.map(function(from){
        return makePair(from, to).map(key);
      }).reduce(function(a, b){
        return a.concat(b);
      }).map(function(it){
        return __dirname + '/' + it;
      });
    };
    require('time-grunt')(grunt);
    loadModuleFirst = function(x){
      switch (false) {
      case !(Object.keys(x)[0].indexOf('module') > -1):
        return -1;
      default:
        return 0;
      }
    };
    separate = function(arr, returnMods){
      return arr.filter(function(it){
        return Object.keys(it)[0].indexOf('module') > -1 === returnMods;
      });
    };
    live = makePair('.ls', '.js');
    liveModules = separate(live, true);
    liveOther = separate(live, false);
    coffee = makePair('.coffee', '.js');
    ts = makePair('.ts', '.js');
    coffeeModules = separate(coffee, true);
    coffeeOther = separate(coffee, false);
    tsModules = separate(ts, true);
    tsOther = separate(ts, false);
    files = {
      live: liveModules.concat(liveOther),
      coffee: coffeeModules.concat(coffeeOther),
      ts: tsModules.concat(tsOther),
      jade: makePair('.jade', '.html'),
      sass: makePair('.sass', '.css')
    };
    path = (js = function(it){
      return "client/js/" + it;
    }, {
      app: js('app.js'),
      appStyle: '.compiled/app/index.css',
      appModule: '.compiled/app/index.js',
      templates: js('app_templates.js')
    });
    grunt.initConfig({
      sass: {
        no_options: {
          includePaths: [__dirname + "/app/components"],
          files: files.sass
        }
      },
      jade: {
        html: {
          files: files.jade,
          options: {
            basedir: __dirname + "/app/components",
            client: false,
            wrap: false,
            node: false,
            runtime: false
          }
        }
      },
      ngAnnotate: {
        options: {
          singleQuotes: true
        },
        app1: {
          files: getCompiled('.js').filter(function(it){
            return it.indexOf('client.js') > -1;
          }).map(function(it){
            var ref$;
            return ref$ = {}, ref$[it + ""] = [it], ref$;
          })
        }
      },
      ngtemplates: {
        app: {
          src: ".compiled/app/components/**/*.html",
          dest: path.templates,
          options: {
            url: function(url){
              return url.replace('.html', '').replace(/.+\//i, '');
            },
            bootstrap: function(module, script){
              return "angular.module('app').run(['$templateCache',function($templateCache) { " + script + " }])";
            }
          }
        }
      },
      ts: {
        options: {
          bare: true
        },
        src: files.ts
      },
      livescript: {
        options: {
          bare: true
        },
        src: {
          files: files.live
        }
      },
      coffee: {
        options: {
          bare: true
        },
        src: {
          files: files.coffee
        }
      },
      bower: {
        install: {}
      },
      bower_concat: {
        all: {
          dest: 'lib/_bower.js',
          cssDest: 'lib/_bower.css',
          dependencies: {},
          bowerOptions: {
            relative: false
          }
        }
      },
      concat: {
        basic: {
          src: [
            staf = ['lib/_bower.js', path.appModule, '.compiled/config.js', path.templates], js = getCompiled(".js").filter(function(it){
              return it.indexOf('client.js') > -1;
            }), staf.concat(js)
          ],
          dest: path.app,
          options: {
            banner: "(function( window ){ \n 'use strict';",
            footer: "}( window ));"
          }
        },
        extra: {
          src: (bower = ['lib/_bower.css'], app = getCompiled(".css"), bower.concat(app)),
          dest: 'client/css/app.css'
        }
      },
      min: {
        dist: {
          src: ['client/js/app.js'],
          dest: 'client/js/app.js'
        }
      },
      remove_usestrict: {
        dist: {
          files: [{
            expand: true,
            cwd: 'client/js/',
            dest: 'client/js/',
            src: ['app.js']
          }]
        }
      },
      ngconstant: {
        options: {
          space: '  ',
          wrap: '(function () { "use strict"; }());\n\n{%= __ngModule %}',
          name: 'config',
          dest: '.compiled/config.js'
        },
        local: {
          constants: {
            enabledDebug: true,
            ENV: {
              name: 'local',
              imgBucket: '//dev-images.ablsolution.com/',
              widgetUrl: '//localhost/',
              apiUrl: '//localhost:8001/'
            }
          }
        },
        c9: {
          constants: {
            enabledDebug: true,
            ENV: {
              name: 'c9',
              imgBucket: '//dev-images.ablsolution.com/',
              widgetUrl: '//tour-widget-askucher.c9.io/',
              apiUrl: '//staging-api.adventurebucketlist.com/'
            }
          }
        },
        askucher: {
          constants: {
            enabledDebug: true,
            ENV: {
              name: 'askucher',
              imgBucket: '//dev-images.ablsolution.com/',
              widgetUrl: '//209.126.77.111:8002/',
              apiUrl: '//209.126.77.111:8001/'
            }
          }
        },
        staging: {
          constants: {
            enabledDebug: false,
            ENV: {
              name: 'staging',
              imgBucket: '//photos.ablsolution.com/',
              widgetUrl: '//m.staging-widget.adventurebucketlist.com/',
              apiUrl: '//staging-api.adventurebucketlist.com/'
            }
          }
        },
        demo: {
          constants: {
            enabledDebug: false,
            ENV: {
              name: 'demo',
              imgBucket: '//demo.ablsolution.com/',
              widgetUrl: '//m.demo-widget.adventurebucketlist.com/',
              apiUrl: '//demo-api.adventurebucketlist.com/'
            }
          }
        },
        prod: {
          constants: {
            enabledDebug: false,
            ENV: {
              name: 'prod',
              imgBucket: '//images.ablsolution.com/',
              widgetUrl: '//m.widget.adventurebucketlist.com/',
              apiUrl: '//api.adventurebucketlist.com/'
            }
          }
        }
      },
      replace: (replace = function(options){
        return {
          options: {
            patterns: options
          },
          files: [{
            expand: true,
            flatten: true,
            src: ['client/js/jquery-button.js', 'client/js/jquery-plugin.js'],
            dest: 'client/js/'
          }]
        };
      }, {
        c9: replace([{
          match: 'server-url/',
          replacement: 'http://tour-widget-askucher.c9.io/'
        }]),
        askucher: replace([{
          match: 'server-url/',
          replacement: 'http://209.126.77.111:8002/'
        }]),
        staging: replace([{
          match: 'server-url/',
          replacement: '//m.staging-widget.adventurebucketlist.com/'
        }]),
        demo: replace([{
          match: 'server-url/',
          replacement: '//m.demo-widget.adventurebucketlist.com/'
        }]),
        prod: replace([{
          match: 'server-url/',
          replacement: '//m.widget.adventurebucketlist.com/'
        }])
      }),
      copy: {
        main: {
          files: [
            {
              expand: false,
              src: ['.compiled/app/index.html'],
              dest: 'client/index.html'
            }, {
              expand: true,
              cwd: '',
              src: 'app/components/**/*.js',
              dest: '.compiled',
              flatten: false,
              filter: 'isFile'
            }, {
              expand: true,
              cwd: '',
              src: 'app/components/**/*.css',
              dest: '.compiled',
              flatten: false,
              filter: 'isFile'
            }, {
              expand: true,
              cwd: '',
              src: 'app/components/**/*.html',
              dest: '.compiled',
              flatten: false,
              filter: 'isFile'
            }
          ]
        }
      },
      removelogging: {
        dist: {
          src: "js/application.js",
          dest: "js/application-clean.js"
        }
      },
      uglify: {
        options: {
          beautify: {
            ascii_only: true
          },
          compress: true,
          mangle: false,
          sourceMap: false,
          ASCIIOnly: true
        },
        target: {
          src: 'client/js/app.js',
          dest: 'client/js/app.js'
        }
      },
      watch: {
        scripts: {
          files: ['app/**/*.*'],
          tasks: ['newer:sass', 'newer:jade', 'newer:livescript', 'newer:coffee', 'xonom', 'copy', 'ngtemplates', 'concat:basic', 'concat:extra', 'remove_usestrict', 'shell:start', 'clean'],
          options: {
            spawn: false,
            livereload: false
          }
        }
      },
      clean: {
        build: {
          src: ['client/js/app_templates.js']
        }
      },
      open: {
        dev: {
          path: 'http://127.0.0.1:80',
          app: 'google-chrome'
        }
      },
      xonom: {
        options: {
          input: {
            controllers: getCompiled(".js").filter(function(it){
              return it.indexOf('api.server.js') > -1;
            })
          },
          output: {
            angularService: '.compiled/xonom.service.js',
            expressRoute: '.compiled/xonom.route.js'
          }
        }
      },
      shell: {
        start: {
          command: 'killall -9 node; cd .compiled; forever stop server.js; forever start server.js'
        },
        node: {
          command: 'killall -9 node; node .compiled/server.js'
        }
      },
      newer: {
        options: {
          cache: '.cache'
        }
      }
    });
    build = ['default', 'askucher', 'prod', 'staging', 'demo', 'dist', 'debug'];
    npmTasks = [
      {
        load: 'bower-task',
        register: 'bower',
        configs: build
      }, {
        load: 'bower-concat',
        register: 'bower_concat',
        configs: build
      }, {
        load: 'ts',
        register: 'ts',
        configs: []
      }, {
        load: 'livescript',
        register: 'livescript',
        configs: build
      }, {
        load: 'contrib-coffee',
        register: 'coffee',
        configs: ['default']
      }, {
        load: 'contrib-jade',
        register: 'jade',
        configs: build
      }, {
        load: 'ng-constant',
        register: 'ngconstant:c9',
        configs: 'default'
      }, {
        load: 'ng-constant',
        register: 'ngconstant:askucher',
        configs: 'askucher'
      }, {
        load: 'ng-constant',
        register: 'ngconstant:staging',
        configs: ['staging']
      }, {
        load: 'ng-constant',
        register: 'ngconstant:demo',
        configs: ['demo']
      }, {
        load: 'ng-constant',
        register: 'ngconstant:prod',
        configs: ['prod']
      }, {
        load: 'sass',
        register: 'sass:no_options',
        configs: build
      }, {
        load: 'contrib-copy',
        register: 'copy',
        configs: build
      }, {
        load: 'angular-templates',
        register: 'ngtemplates',
        configs: build
      }, {
        load: 'xonom',
        register: 'xonom',
        configs: build
      }, {
        load: 'ng-annotate',
        register: 'ngAnnotate',
        configs: build
      }, {
        load: 'contrib-concat',
        register: 'concat',
        configs: build
      }, {
        load: 'remove-usestrict',
        register: 'remove_usestrict',
        configs: build
      }, {
        load: 'contrib-uglify',
        register: 'uglify',
        configs: ['askucher', 'prod', 'demo', 'staging']
      }, {
        load: 'yui-compressor',
        register: 'min',
        configs: []
      }, {
        load: 'shell',
        register: 'shell:start',
        configs: ['default', 'askucher']
      }, {
        load: 'shell',
        register: 'shell:node',
        configs: ['debug']
      }, {
        load: 'contrib-clean',
        register: 'clean',
        configs: build
      }, {
        load: 'open',
        register: 'open',
        configs: [[]]
      }, {
        load: 'contrib-watch',
        register: 'watch',
        configs: ['default']
      }
    ];
    for (i$ = 0, len$ = npmTasks.length; i$ < len$; ++i$) {
      task = npmTasks[i$];
      grunt.loadNpmTasks("grunt-" + task.load);
    }
    load = function(name){
      return grunt.registerTask(name, npmTasks.filter(function(it){
        return it.configs.indexOf(name) > -1;
      }).map(function(it){
        return it.register;
      }));
    };
    grunt.loadNpmTasks('grunt-newer');
    load('default');
    load('askucher');
    load('staging');
    load('demo');
    return load('prod');
  };
}).call(this);
